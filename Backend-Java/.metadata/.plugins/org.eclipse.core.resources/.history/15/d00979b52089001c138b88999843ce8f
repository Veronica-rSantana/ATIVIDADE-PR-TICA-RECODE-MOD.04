package br.com.crud.dao;


	import java.sql.Connection;
	import java.sql.PreparedStatement;
	import java.sql.ResultSet;
	import java.util.ArrayList;
	import java.util.List;
	import br.com.crud.factory.ConnectionFactory;
	import br.com.crud.model.Destino;
	import br.com.crud.model.Passagens;


	public class PassagemDAO {
		public void save(Passagens passagem) {
			/*
			 * Isso é uma sql comum, os ? são os parâmetros que nós vamos adicionar na base
			 * de dados
			 */

			String sql = "INSERT INTO Passagens(Origem, Destino, DataIda, DataVolta,Valor)" + "VALUES(?,?)";

			Connection conn = null;
			PreparedStatement pstm = null;

			try {
				// Cria uma conexão com o banco
				conn = ConnectionFactory.createConnectionSQLServer();

				// Cria um PreparedStatement, classe usada para executar a query
				pstm = conn.prepareStatement(sql);

				// Adicionar o valor do primeiro parámetro da sql
				pstm.setString(1, passagem.getOrigem());
				
				// Adicionar o valor do primeiro parámetro da sql
				pstm.setString(2, passagem.getDestino());
				
				// Adicionar o valor do primeiro parámetro da sql
				pstm.setString(3, passagem.getDataIda());
				
				// Adicionar o valor do primeiro parámetro da sql
				pstm.setString(4, passagem.getDataVolta());
				
				// Adicionar o valor do primeiro parámetro da sql
				pstm.setDouble(5, passagem.getValor());
				
				// Executar a sql para inserção dos dados
				pstm.execute();

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// fecha as conexões
				try {
					if (pstm != null) {
						pstm.close();
					}
					if (conn != null) {
						conn.close();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		public void removeById(int id) {
			String sql = "DELETE FROM Passagens WHERE Id = ?";

			Connection conn = null;
			PreparedStatement pstm = null;

			try {
				conn = ConnectionFactory.createConnectionSQLServer();

				pstm = conn.prepareStatement(sql);

				pstm.setInt(1, id);

				pstm.execute();
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (pstm != null) {
						pstm.close();
					}

					if (conn != null) {
						conn.close();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		public void update(Passagens passagem) {
			String sql = "UPDATE Passagens SET Origem= ?, Destino =?, DataIda=?, DataVolta=?, Valor=? WHERE id_passagem = ?";

			Connection conn = null;
			PreparedStatement pstm = null;

			try {
				// Cria uma conexão com o banco
				conn = ConnectionFactory.createConnectionSQLServer();

				// Cria um PreparedStatement, classe usada para executar a query
				pstm = conn.prepareStatement(sql);

				// Adiciona o valor do primeiro parâmetro da sql
				pstm.setString(1, passagem.getOrigem());
				
				// Adiciona o valor do primeiro parâmetro da sql
				pstm.setString(2, passagem.getDestino());
				
				// Adiciona o valor do primeiro parâmetro da sql
				pstm.setString(3, passagem.getDataIda());
				
				// Adiciona o valor do primeiro parâmetro da sql
				pstm.setString(4, passagem.getDataVolta());
				
				// Adiciona o valor do primeiro parâmetro da sql
				pstm.setDouble(5, passagem.getValor());
				// Adiciona o valor do primeiro parâmetro da sql
			
				// Executa a sql para inserção dos dados
				pstm.execute();

			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				// Fecha as conexões
				try {
					if (pstm != null) {
						pstm.close();
					}
					if (conn != null) {
						conn.close();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		public List<Passagens> getPassagem() {

			String sql = "SELECT * FROM Passagens";

			List<Passagens> passagem = new ArrayList<Passagens>();

			Connection conn = null;
			PreparedStatement pstm = null;

			// Classe que vai recuperar os dados do banco de dados
			ResultSet rset = null;

			try {
				conn = ConnectionFactory.createConnectionSQLServer();

				pstm = conn.prepareStatement(sql);

				rset = pstm.executeQuery();

				// Enquanto existir dados no banco de dados, faça
				while (rset.next()) {
					Passagens passagens = new Passagens();

					// Recupera o id do banco e atribui ele ao objeto
					passagens.setId_passagem(rset.getInt("id_passagem"));

					// Recupera o nome do banco e atribui ele ao objeto
					passagens.setOrigem(rset.getString("Origem"));

					// Recupera a idade do banco e atribui ele ao objeto
					passagens.setDestino(rset.getString("Destino"));

					// Adiciona o cadastro recuperado, a lista de cadastros
					passagens.add(passagens);
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (rset != null) {
						rset.close();
					}
					if (pstm != null) {
						pstm.close();
					}
					if (conn != null) {
						conn.close();
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			return passagem;
		}
		
	}
